(println "Basics")
(println "Hello, World!")
(println (+ 21 21))
(defn say-hello [] "Hello, bro")
(println (say-hello))
(def keywords [:a :b :c])
(println (first keywords))
(def a-list (list :a :b :c))
(println (second a-list))
(def b-list (read-string "(:a :b :c)"))
(println "a-list: " a-list)
(println "b-list: " b-list)
(println "a-list = b-list? " (= a-list b-list))
(println "Homoiconicty")
(def h-list (list + 5 10))
(println "h-list: " h-list)
(println "eval h-list: " (eval h-list))
(println "Macros")
(defmacro make-printer [name, to-print]
  `(defn ~name [] (println ~to-print)))
(make-printer say-hello "Hello, mate")
(say-hello)
(println "Backtick")
(println `(+ (+ 1 2) ~(+ 3 4)))
